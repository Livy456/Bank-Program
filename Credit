/******************************************/
/* USER DESCRIPTION SECTION 			  */
/* OLIVIA 				   			  */
/* CHAPTER 11 PROJECT 11-5			   	  */
/* PROGRAM 10							  */
/* DECEMBER 6, 2019		   			  	  */
/******************************************/
/******************************************/
/* THIS IS A PROGRAM TO MAKE AN OBJECT	  */
/* HAVE INSTANCE VARIABLES, CONSTRUCTORS, */
/* AND METHODS SO THE CLIENT CAN INPUT	  */
/* THEIR CREDIT LINE AND EXTENDS SAVINGS  */
/******************************************/

/******************/
/* IMPORT SECTION */
/******************/
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.text.DecimalFormat;

public class Credit extends Savings
{
	/*****************************/
	/* INSTANCE VARIABLE SECTION */
	/*****************************/
	protected double credLine;		// INSTANCE VARIABLE FOR CREDIT LINE
	
	public Credit()
	/**************************************************/
	/* DEFAULT CONSTRUCTOR - IT SETS ALL THE INSTANCE */
	/* VARIABLE VALUES TO AN EMPTY STRING AND ZERO 	  */
	/**************************************************/
	{
		super();			// ACTIVATES THE DEFAULT CONSTRUCTOR IN SAVINGS 
		credLine = 0;		// INTIALIZES CREDLINE TO ZERO
	}
	
	public Credit(String nm, double bl, double dp, double wd, double it, 
			      int t, int r, double crdL) 
	/*********************************************************/
	/* INITIALIZING CONSTRUCTOR - INITIALIZES NAME, BALANCE, */
	/* DEPOSIT, WITHDRAW, INTEREST, AND CREDLINE 	  		 */
	/*********************************************************/
	{
		super (nm, bl, dp, wd, it, t, r);	// ACTIVATES INTIALIZING CONSTRUCTOR 
											// IN SAVINGS
		credLine = crdL;			  		// INTIALIZES CREDLINE TO VALUE 
											// INPUTTED BY CLIENT
	}
	
	public Credit(Credit c)
	/**********************************************************/
	/* COPY CONSTRUCTOR - USES AN OBJECT TO INITIALIZES NAME, */
	/* BALANCE, DEPOSIT, WITHDRAW, INTEREST, AND CREDLINE 	  */
	/**********************************************************/
	{
		super (c.name, c.balance, c.deposit, c.withdraw, c.interest, 
			   c.time, c.rate);	// ACTIVATES COPY CONSTRUCTOR IN SAVINGS
		credLine = c.credLine;	// INTIALIZES CREDLINE TO COPY OF OBJECT 
								// CREDLINE VALUE
	}
	
	public void setCred(double crdL)
	/***************************************************/
	/* PRECONDITION - PROGRAM HAS A CREDLINE		   */
	/* POSTCONDITION - FUNCTION SETS VALUE OF CREDLINE */
	/***************************************************/
	{	
		credLine = crdL;	// SETS BALANCE TO CREDLINE VALUE INPUTTED FROM CLIENT
	}
	
	public double getCred()
	/*********************************************/
	/* PRECONDITION - PROGRAM HAS A CREDLINE	 */
	/* POSTCONDITION - FUNCTION RETURNS CREDLINE */
	/*********************************************/
	{
		/******************/
		/* RETURN SECTION */
		/******************/
		return credLine;	// RETURNS CREDLINE
	}
	
	public double getAddDp()
	/****************************************************/
	/* PRECONDITION - PROGRAM HAS A BALANCE AND DEPOSIT */
	/* POSTCONDITION - FUNCTION RETURNS BALANCE   	  	*/
	/****************************************************/
	{
		balance -= deposit;		// PAYS OFF THE CREDIT DUE TO THE BANK
		
		/******************/
		/* RETURN SECTION */
		/******************/
		return balance;		// RETURNS BALANCE
	}
	
	public double getSubWd()
	/****************************************************/
	/* PRECONDITION - PROGRAM HAS A BALANCE AND WITHDRW */
	/* POSTCONDITION - FUNCTION RETURNS BALANCE   	  	*/
	/****************************************************/
	{
		balance += withdraw; 		// ADDING ON AMOUNT DUE TO THE BANK
									// OR THE DEBT OWED TO BANK 
		/******************/
		/* RETURN SECTION */
		/******************/
		return balance;		// RETURNS BALANCE
	}
	
	public double getSubBal()
	/**************************************************/
	/* PRECONDITION - PROGRAM HAS A BALANCE, DEPOSIT, */
	/* 				  INTEREST, TIME, AND RATE 		  */
	/* POSTCONDITION - FUNCTION RETURNS BALANCE   	  */
	/**************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		double power; 		// USED FOR ASSIGNING VALUE OF INTEREST TIMES TIME
		double value;		// USED FOR ASSINGING VALUE OF INTEREST DIVIDED BY RATE	
		double it;			// USED FOR ASSIGNING VALUE OF DECIMAL FORM OF INTEREST
		double nt;			// USED FOR ASSIGNINGB VALUE OF INTEREST DIVIDED BY RATE
		
		/*****************************************************/
		/* CALCULATION SECTION FOR COMPOUND INTEREST OF DEBT */
		/*****************************************************/
		it = interest / 100;							// MAKES INTEREST INTO A DECIMAL
		power = rate * time;							// ASSIGNS POWER TO POWER PART OF COMPOUND INTEREST EQUATION 
		nt = (double)it / rate;							// FINDS THE VALUE OF N/T IN THE COMPOUND INTEREST EQUATION
		value = 1 + nt;									// ASSIGNS VALUE TO MIDDLE PART OF COMPOUND INTEREST EQUATION
		balance = balance * (Math.pow(value, power));	// ASSIGNS BALANCE TO VALUE OF COMPOUND INTEREST EQUATION
		
		/******************/
		/* RETURN SECTION */
		/******************/
		return balance;		// RETURNS BALANCE	
	}
	
	public String toString()
	/******************************************************/
	/* OVERRIDES THE TOSTRING IN THE PARENT CLASS SAVINGS */
	/* AND CREATES A STRING REPRESENTATION OF THIS OBJECT */
	/******************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String str; 	// STRING REPRESENTATION OF OBJECT
		
		/*****************************************/
		/* MAKES STRING REPRESENTATION OF OBJECT */
		/*****************************************/
		str = super.toString() +
			 "Your credit limit is $" + credLine;
		
		/******************/
		/* RETURN SECTION */
		/******************/ 
		return str;			// RETURNS STRING REPRESENTATION OF OBJECT
	}
}
