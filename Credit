/******************************************/
/* USER DESCRIPTION SECTION 			  */
/* OLIVIA DIAS				   			  */
/* CHAPTER 11 PROJECT 11-5			   	  */
/* PROGRAM 10							  */
/* DECEMBER 6, 2019		   			  	  */
/******************************************/
/******************************************/
/* THIS IS A PROGRAM TO MAKE AN OBJECT	  */
/* HAVE INSTANCE VARIABLES, CONSTRUCTORS, */
/* AND METHODS SO THE CLIENT CAN INPUT	  */
/* THEIR CREDIT LINE AND EXTENDS SAVINGS  */
/******************************************/

public class Credit extends Savings
{
	/*****************************/
	/* INSTANCE VARIABLE SECTION */
	/*****************************/
	private double interest; 		// INSTANCE VARIABLE FOR INTEREST
	private double credLine;		// INSTANCE VARIABLE FOR CREDIT LINE
	
	public Credit()
	/**************************************************/
	/* DEFAULT CONSTRUCTOR - IT SETS ALL THE INSTANCE */
	/* VARIABLE VALUES TO AN EMPTY STRING AND ZERO 	  */
	/**************************************************/
	{
		super();			// ACTIVATES THE DEFAULT CONSTRUCTOR IN SAVINGS 
		credLine = 0.00;	// INTIALIZES CREDLINE TO ZERO
	}
	
	public Credit(String nm, double bl, double dp, double wd, double it, double crdL)
	/*********************************************************/
	/* INITIALIZING CONSTRUCTOR - INITIALIZES NAME, BALANCE, */
	/* DEPOSIT, WITHDRAW, INTEREST, AND CREDLINE 	  		 */
	/*********************************************************/
	{
		super (nm, bl, dp, wd, it);	   // ACTIVATES INTIALIZING CONSTRUCTOR IN SAVINGS
		credLine = crdL;			   // INTIALIZES CREDLINE TO VALUE INPUTTED BY CLIENT
	}
	
	public Credit (Credit c)
	/**********************************************************/
	/* COPY CONSTRUCTOR - USES AN OBJECT TO INITIALIZES NAME, */
	/* BALANCE, DEPOSIT, WITHDRAW, INTEREST, AND CREDLINE 	  */
	/**********************************************************/
	{
		super (c.name, c.balance, c.deposit, c.withdraw, c.interest);// ACTIVATES COPY 
																	 // CONSTRUCTOR IN 
																	 // SAVINGS
		credLine = c.credLine;										 // INTIALIZES 
																	 // CREDLINE TO 
																	 // COPY OF OBJECT 
																	 // CREDLINE VALUE
	}
	
	public void setBalance (double bl)
	/**************************************************/
	/* PRECONDITION - PROGRAM HAS A BALANCE			  */
	/* POSTCONDITION - FUNCTION SETS VALUE OF BALANCE */
	/**************************************************/
	{
		balance = bl;		// SETS BALANCE TO BALANCE VALUE INPUTTED FROM CLIENT
	}
	
	public double getBalance()
	/****************************************************/
	/* PRECONDITION - PROGRAM HAS A BALANCE			  	*/
	/* POSTCONDITION - FUNCTION RETURNS BALANCE			*/
	/****************************************************/
	{
		/******************/
		/* RETURN SECTION */
		/******************/
		return balance;		// RETURNS BALANCE
	}
	
	public void setCred()
	
	{	
		
	}
	
}
// MAKE AN ABSTRACT CLASS IN STANDBANK
