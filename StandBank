/******************************************/
/* USER DESCRIPTION SECTION 			  */
/* OLIVIA 				   			  */
/* CHAPTER 11 PROJECT 11-5			   	  */
/* PROGRAM 10							  */
/* DECEMBER 6, 2019		   				  */
/******************************************/
/******************************************/
/* THIS IS A PROGRAM TO MAKE AN OBJECT	  */
/* HAVE INSTANCE VARIABLES, CONSTRUCTORS, */
/* AND METHODS SO THE CLIENT CAN INPUT	  */
/* THEIR NAME, BALANCE, AND HOW MUCH 	  */
/* THEY WANT TO DEPOSIT OR WITHDRAW 	  */			
/******************************************/

/******************/
/* IMPORT SECTION */
/******************/
import javax.swing.*;			// IMPORTS SWING
import java.awt.*;				// IMPORTS AWT
import java.awt.event.*;		// IMPORTS A LISTENER EVENT
import java.text.DecimalFormat;	// IMPORTS DECIMAL FORMAT

abstract public class StandBank 
{
	/*****************************/
	/* INSTANCE VARIABLE SECTION */
	/*****************************/
	protected String name;		// INSTANCE VARIABLE FOR USER'S NAME
	protected double balance;	// INSTANCE VARIABLE FOR USER'S BALANCE
	protected double deposit;	// INSTANCE VARIABLE FOR USER'S DEPOSIT AMOUNT
	protected double withdraw;	// INSTANCE VARIABLE FOR USER'S WITHDRAW AMOUNT
		
	public StandBank()
	/**************************************************/
	/* DEFAULT CONSTRUCTOR - IT SETS ALL THE INSTANCE */
	/* VARIABLE VALUES TO AN EMPTY STRING AND ZERO 	  */
	/**************************************************/
	{
		name = "";			// INTIALIZES NAME TO AN EMPTY STRING
		balance = 0.00;		// INTIALIZES BALANCE TO ZERO
		deposit = 0.00;		// INTIALIZES DEPOSIT TO ZERO
		withdraw = 0.00;		// INTIALIZES WITHDRAW TO ZERO
	}
	
	public StandBank(String nm, double bl, double dp, double wd)
	/*********************************************************/
	/* INITIALIZING CONSTRUCTOR - INITIALIZES NAME, BALANCE, */
	/* DEPOSIT, AND WITHDRAW 	  			     			 */
	/*********************************************************/
	{
		name = nm;			// INTIALIZES NAME TO VALUE INPUTTED BY CLIENT
		balance = bl;		// INTIALIZES BALANCE TO VALUE INPUTTED BY CLIENT
		deposit = dp;		// INTIALIZES DEPOSIT TO VALUE INPUTTED BY CLIENT
		withdraw = wd;		// INTIALIZES WITHDRAW TO VALUE INPUTTED BY CLIENT
	}

	public StandBank(StandBank b)
	/****************************************************/
	/* COPY CONSTRUCTOR - USES AN OBJECT TO INITIALIZES */
	/* NAME, BALANCE, DEPOSIT, AND WITHDRAW 	  		*/
	/****************************************************/
	{
		name = b.name;			// INTIALIZES NAME TO COPY OF OBJECT NAME VALUE
		balance = b.balance;	// INTIALIZES BALANCE TO COPY OF OBJECT NAME 
		deposit = b.deposit;	// INTIALIZES DEPOSIT TO COPY OF OBJECT NAME 
		withdraw = b.withdraw;	// INTIALIZES WITHDRAW TO COPY OF OBJECT NAME 
	}
	
	public void setName(String nm)
	/************************************************/
	/* PRECONDITION - PROGRAM HAS A NAME			*/
	/* POSTCONDITION - FUNCTION SETS VALUE OF NAME	*/
	/************************************************/	
	{
		name = nm; 			// SETS NAME TO NAME VALUE INPUTTED FROM CLIENT
	}
		
	public String getName()
	/************************************************/
	/* PRECONDITION - PROGRAM HAS A NAME			*/
	/* POSTCONDITION - FUNCTION RETURNS NAME		*/
	/************************************************/
	{
		/******************/
		/* RETURN SECTION */
		/******************/
		return name;		// RETURNS NAME
	}
		
	public void setBalance(double bl)
	/**************************************************/
	/* PRECONDITION - PROGRAM HAS A BALANCE			  */
	/* POSTCONDITION - FUNCTION SETS VALUE OF BALANCE */
	/**************************************************/		
	{	
		balance = bl;		// SETS BALANCE TO BALANCE VALUE INPUTTED FROM CLIENT
	}
	
	public double getBalance()
	/****************************************************/
	/* PRECONDITION - PROGRAM HAS A BALANCE			  	*/
	/* POSTCONDITION - FUNCTION RETURNS BALANCE			*/
	/****************************************************/		
	{
		/******************/
		/* RETURN SECTION */
		/******************/
		return balance;		// RETURNS BALANCE
	}
		
	public void setDeposit(double dp)
	/**************************************************/
	/* PRECONDITION - PROGRAM HAS A DEPOSIT			  */
	/* POSTCONDITION - FUNCTION SETS VALUE OF DEPOSIT */
	/**************************************************/		
	{
		deposit = dp;	// SETS DEPOSIT TO DEPOSIT VALUE INPUTTED FROM CLIENT
	} 
		
	public double getDeposit()
	/****************************************************/
	/* PRECONDITION - PROGRAM HAS A DEPOSIT			  	*/
	/* POSTCONDITION - FUNCTION RETURNS DEPOSIT			*/
	/****************************************************/		
	{
		/******************/
		/* RETURN SECTION */
		/******************/
		return deposit;		// RETURNS DEPOSIT
	}
		
	public void setWithdraw(double wd)
	/***************************************************/
	/* PRECONDITION - PROGRAM HAS A WITHDRAW		   */
	/* POSTCONDITION - FUNCTION SETS VALUE OF WITHDRAW */
	/***************************************************/
	{
		withdraw = wd;	// SETS WITHDRAW TO WITHDRAW VALUE INPUTTED FROM CLIENT
	}
		
	public double getWithdraw()
	/****************************************************/
	/* PRECONDITION - PROGRAM HAS A WITHDRAW			*/
	/* POSTCONDITION - FUNCTION RETURNS WITHDRAW		*/
	/****************************************************/
	{
		/******************/
		/* RETURN SECTION */
		/******************/
		return withdraw;	// RETURNS WITHDRAW
	}
	
	abstract public double getAddBal();	// ABSTRACT METHOD FOR ADDING BALANCE 
										// MUST BE DEFINED BY SUBCLASSES 
	
	abstract public double getSubWd();	// ABSTRACT METHOD FOR SUBTRACTING  
										// WITHDRAW MUST BE DEFINED BY SUBCLASSES 

	public String toString()
	/******************************************************/
	/* OVERRIDES THE TOSTRING IN THE PARENT CLASS OBJECT  */
	/* AND CREATES A STRING REPRESENTATION OF THIS OBJECT */
	/******************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String str;										// STRING REPRESENTATION OF OBJECT
		DecimalFormat df = new DecimalFormat("#.##");	// INSTANTIATES THE DF TO FORMAT DECIMALS
		String dfbalance = df.format(balance);			// CONVERTS BALANCE TO A STRING TO FORMAT DECIMALS
		String dfdeposit = df.format(deposit);			// CONVERTS DEPOSIT TO A STRING TO FORMAT DECIMALS
		String dfwithdraw = df.format(withdraw);		// CONVERTS WITHDRAW TO A STRING TO FORMAT DECIMALS
		
		/*****************************************/
		/* MAKES STRING REPRESENTATION OF OBJECT */
		/*****************************************/
		str = "Your name is " + name + "\n" +
			  "and your final balance is $"+ dfbalance + ".\n" +
			  "You have deposited $" + dfdeposit + ".\n" + 
			  "You have withdrawn $" + dfwithdraw + ".";				
		
		/******************/
		/* RETURN SECTION */
		/******************/ 
		return str;				// RETURNS STRING REPRESENTATION OF OBJECT
	}
}
