/******************************************/
/* USER DESCRIPTION SECTION 			  */
/* OLIVIA 				   			  */
/* CHAPTER 11 PROJECT 11-5			   	  */
/* PROGRAM 10							  */
/* DECEMBER 6, 2019		   			  	  */
/******************************************/
/******************************************/
/* THIS IS A PROGRAM TO MAKE AN OBJECT	  */
/* HAVE INSTANCE VARIABLES, CONSTRUCTORS, */
/* AND METHODS SO THE CLIENT CAN INPUT	  */
/* THEIR INTEREST RATE AND ALSO EXTENDS   */
/* STANDBANK				  	  		  */
/******************************************/

/******************/
/* IMPORT SECTION */
/******************/
import javax.swing.*;			// IMPORTS SWING
import java.awt.*;				// IMPORTS AWT
import java.awt.event.*;		// IMPORTS A LISTENER EVENT
import java.text.DecimalFormat;	// IMPORTS DECIMAL FORMAT

public class Savings extends StandBank 
{
	/*****************************/
	/* INSTANCE VARIABLE SECTION */
	/*****************************/
	protected int interest;		// INSTANCE VARIABLE FOR INTEREST RATE
	protected int time;			// INSTANCE VARIABLE FOR YEARS CLIENT COMPOUNDED 
	protected int rate;			// INSTANCE VARIABLE FOR PERIODIC RATE THAT
								// CLIENT COMPOUNDED
	
	public Savings()
	/**************************************************/
	/* DEFAULT CONSTRUCTOR - IT SETS ALL THE INSTANCE */
	/* VARIABLE VALUES TO AN EMPTY STRING AND ZERO 	  */
	/**************************************************/
	{
		super ();			// ACTIVATES THE DEFAULT CONSTRUCTOR IN STANDBANK 
		interest = 0;		// INTIALIZES INTEREST TO ZERO
		time = 0;			// INTIALIZES TIME TO ZERO
		rate = 0;			// INTIALIZES RATE TO ZERO
	}
	
	public Savings(String nm, double bl, double dp, double wd, 
				   int it, int t, int r)
	/*********************************************************/
	/* INITIALIZING CONSTRUCTOR - INITIALIZES NAME, BALANCE, */
	/* DEPOSIT, WITHDRAW, INTEREST, TIME, AND RATE 			 */
	/*********************************************************/
	{
		super (nm, bl, dp, wd);	// ACTIVATES INTIALIZING CONSTRUCTOR IN STANDBANK
		interest = it;			// INTIALIZES INTEREST TO VALUE INPUT FROM CLIENT
		time = t;				// INTIALIZES TIME TO VALUE INPUT FROM CLIENT
		rate = r;				// INTIALIZES RATE TO VALUE INPUT FROM CLIENT
	}
	
	public Savings(Savings s)
	/**********************************************************/
	/* COPY CONSTRUCTOR - USES AN OBJECT TO INITIALIZES NAME, */
	/* BALANCE, DEPOSIT, WITHDRAW, INTEREST, TIME, AND RATE   */
	/**********************************************************/
	{
		super (s.name, s.balance, 
			   s.deposit, s.withdraw); // ACTIVATES COPY CONSTRUCTOR IN STANDBANK
		interest = s.interest; 	// INTIALIZES INTEREST COPY OF OBJECT INTEREST
		time = s.time;			// INTIALIZES TIME COPY OF OBJECT TIME 
		rate = s.rate;			// INTIALIZES RATE COPY OF OBJECT RATE
	}
	
	public final void setInterest(int it)
	/***************************************************/
	/* PRECONDITION - PROGRAM HAS A INTEREST		   */
	/* POSTCONDITION - FUNCTION SETS VALUE OF INTEREST */
	/***************************************************/
	{
		interest = it;	// SETS INTEREST TO INTEREST VALUE INPUTTED FROM CLIENT
	}
	
	public final double getInterest()
	/****************************************************/
	/* PRECONDITION - PROGRAM HAS A INTEREST			*/
	/* POSTCONDITION - FUNCTION RETURNS INTEREST		*/
	/****************************************************/
	{
		/******************/
		/* RETURN SECTION */
		/******************/
		return interest;	// RETURNS INTEREST
	}
	
	public void setTime(int t)
	/***********************************************/
	/* PRECONDITION - PROGRAM HAS A TIME		   */
	/* POSTCONDITION - FUNCTION SETS VALUE OF TIME */
	/***********************************************/
	{
		time = t;		// SETS TIME TO TIME VALUE INPUTTED FROM CLIENT
	}
	
	public int getTime()
	/*****************************************/
	/* PRECONDITION - PROGRAM HAS A TIME	 */
	/* POSTCONDITION - FUNCTION RETURNS TIME */
	/*****************************************/
	{
		/******************/
		/* RETURN SECTION */
		/******************/
		return time;		// RETURNS TIME
	}
	
	public void setRate(int r)
	/***********************************************/
	/* PRECONDITION - PROGRAM HAS A RATE		   */
	/* POSTCONDITION - FUNCTION SETS VALUE OF RATE */
	/***********************************************/
	{
		rate = r;		// SETS RATE TO RATE VALUE INPUTTED FROM CLIENT
	}
	
	public int getRate()
	/*****************************************/
	/* PRECONDITION - PROGRAM HAS A RATE	 */
	/* POSTCONDITION - FUNCTION RETURNS RATE */
	/*****************************************/
	{
		/******************/
		/* RETURN SECTION */
		/******************/
		return rate;		// RETURNS RATE
	}
	
	public double getAddDep()
	/****************************************************/
	/* PRECONDITION - PROGRAM HAS A BALANCE AND DEPOSIT */
	/* POSTCONDITION - FUNCTION RETURNS BALANCE   	    */
	/****************************************************/
	{
		balance += deposit;		// ADDS DEPOSIT TO BALANCE 
		
		/******************/
		/* RETURN SECTION */
		/******************/
		return balance;			// RETURNS RATE
	}
	
	public double getAddBal()
	/**************************************************/
	/* PRECONDITION - PROGRAM HAS A BALANCE, DEPOSIT, */
	/* 				  INTEREST, TIME, AND RATE 		  */
	/* POSTCONDITION - FUNCTION RETURNS BALANCE   	  */
	/**************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		double power; 		// USED FOR VALUE OF INTEREST TIMES TIME
		double value;		// USED FOR VALUE OF INTEREST DIVIDED BY RATE	
		double it;			// USED FOR VALUE OF DECIMAL FORM OF INTEREST
		double nt;			// USED FOR VALUE OF INTEREST DIVIDED BY RATE
		
		/*********************************************/
		/* CALCULATION SECTION FOR COMPOUND INTEREST */
		/*********************************************/
		it = (double)interest / 100;// INTEREST AS A DECIMAL
		power = rate * time;		// EXPONENT IN COMPOUND INTEREST EQUATION 
		nt = (double)it / rate;		// N/T IN COMPOUND INTEREST EQUATION
		value = 1 + nt;				// MIDDLE PART OF COMPOUND INTEREST EQUATION
		balance = balance * (Math.pow(value, power));	// FINAL BALANCE 
		
		/******************/
		/* RETURN SECTION */
		/******************/
		return balance;		// RETURNS BALANCE
	}
	
	public double getSubWd()
	/*****************************************************/
	/* PRECONDITION - PROGRAM HAS A BALANCE AND WITHDRAW */
	/* POSTCONDITION - FUNCTION RETURNS BALANCE   	  	 */
	/*****************************************************/
	{
		balance -= withdraw;	// SUBTRACTS WITHDRAW FROM BALANCE
		
		/******************/
		/* RETURN SECTION */
		/******************/
		return balance;			// RETURNS BALANCE
	}
	
	public String toString ()
	/********************************************************/
	/* OVERRIDES THE TOSTRING IN THE PARENT CLASS STANDBANK */
	/* AND CREATES A STRING REPRESENTATION OF THIS OBJECT   */
	/********************************************************/
	{
		/********************/
		/* VARIABLE SECTION */
		/********************/
		String str; 	// STRING REPRESENTATION OF OBJECT
		
		/*****************************************/
		/* MAKES STRING REPRESENTATION OF OBJECT */
		/*****************************************/
		str = super.toString() +
			  "\nYour interest rate is " + interest + "%.\n" +
			  "You have accrued interest for " + time + " years at a rate " +
			  "of " + rate + " times a year.";
		
		/******************/
		/* RETURN SECTION */
		/******************/ 
		return str;			// RETURNS STRING REPRESENTATION OF OBJECT
	}
}
