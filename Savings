/******************************************/
/* USER DESCRIPTION SECTION 			  */
/* OLIVIA 				   			  */
/* CHAPTER 11 PROJECT 11-5			   	  */
/* PROGRAM 10							  */
/* DECEMBER 6, 2019		   			  	  */
/******************************************/
/******************************************/
/* THIS IS A PROGRAM TO MAKE AN OBJECT	  */
/* HAVE INSTANCE VARIABLES, CONSTRUCTORS, */
/* AND METHODS SO THE CLIENT CAN INPUT	  */
/* THEIR INTEREST RATE AND ALSO EXTENDS   */
/* STANDBANK				  	  		  */
/******************************************/

public class Savings extends StandBank 
{
	/*****************************/
	/* INSTANCE VARIABLE SECTION */
	/*****************************/
	protected double interest;	// INSTANCE VARIABLE FOR INTEREST RATE
	protected int time;			// INSTANCE VARIABLE FOR YEARS THAT CLIENT COMPOUNDED 
	protected int rate;			// INSTANCE VARIABLE FOR PERIODIC RATE THAT
								// CLIENT COMPOUNDED
	
	public Savings ()
	/**************************************************/
	/* DEFAULT CONSTRUCTOR - IT SETS ALL THE INSTANCE */
	/* VARIABLE VALUES TO AN EMPTY STRING AND ZERO 	  */
	/**************************************************/
	{
		super ();			// ACTIVATES THE DEFAULT CONSTRUCTOR IN STANDBANK 
		interest = 0.00;	// INTIALIZES INTEREST TO ZERO
		time = 0;			// INTIALIZES TIME TO ZERO
		rate = 0;			// INTIALIZES RATE TO ZERO
	}
	
	public Savings (String nm, double bl, double dp, double wd, 
					double it, int t, int r)
	/*********************************************************/
	/* INITIALIZING CONSTRUCTOR - INITIALIZES NAME, BALANCE, */
	/* DEPOSIT, WITHDRAW, INTEREST, TIME, AND RATE 			 */
	/*********************************************************/
	{
		super (nm, bl, dp, wd);		// ACTIVATES INTIALIZING CONSTRUCTOR IN STANDBANK
		interest = it;				// INTIALIZES INTEREST TO VALUE INPUTTED BY CLIENT
		time = t;					// INTIALIZES TIME TO VALUE INPUTTED BY CLIENT
		rate = r;					// INTIALIZES RATE TO VALUE INPUTTED BY CLIENT
	}
	
	public Savings (Savings s)
	/**********************************************************/
	/* COPY CONSTRUCTOR - USES AN OBJECT TO INITIALIZES NAME, */
	/* BALANCE, DEPOSIT, WITHDRAW, INTEREST, TIME, AND RATE   */
	/**********************************************************/
	{
		super (s.name, s.balance, s.deposit, s.withdraw); // ACTIVATES COPY CONSTRUCTOR 
														  // IN STANDBANK
		interest = s.interest; 	// INTIALIZES INTEREST COPY OF OBJECT INTEREST VALUE
		time = s.time;			// INTIALIZES TIME COPY OF OBJECT TIME VALUE
		rate = s.rate;			// INTIALIZES RATE COPY OF OBJECT RATE VALUE
	}
	
	public final void setInterest (double it)
	/***************************************************/
	/* PRECONDITION - PROGRAM HAS A INTEREST		   */
	/* POSTCONDITION - FUNCTION SETS VALUE OF INTEREST */
	/***************************************************/
	{
		interest = it;		// SETS INTEREST TO INTEREST VALUE INPUTTED FROM CLIENT
	}
	
	public final double getInterest ()
	/****************************************************/
	/* PRECONDITION - PROGRAM HAS A INTEREST			*/
	/* POSTCONDITION - FUNCTION RETURNS INTEREST		*/
	/****************************************************/
	{
		/******************/
		/* RETURN SECTION */
		/******************/
		return interest;	// RETURNS INTEREST
	}
	
	public void setTime (int t)
	/***********************************************/
	/* PRECONDITION - PROGRAM HAS A TIME		   */
	/* POSTCONDITION - FUNCTION SETS VALUE OF TIME */
	/***********************************************/
	{
		time = t;			// SETS TIME TO TIME VALUE INPUTTED FROM CLIENT
	}
	
	public int getTime ()
	/*****************************************/
	/* PRECONDITION - PROGRAM HAS A TIME	 */
	/* POSTCONDITION - FUNCTION RETURNS TIME */
	/*****************************************/
	{
		/******************/
		/* RETURN SECTION */
		/******************/
		return time;		// RETURNS TIME
	}
	
	public void setRate (int r)
	/***********************************************/
	/* PRECONDITION - PROGRAM HAS A RATE		   */
	/* POSTCONDITION - FUNCTION SETS VALUE OF RATE */
	/***********************************************/
	{
		rate = r;			// SETS RATE TO RATE VALUE INPUTTED FROM CLIENT
	}
	
	public int getRate ()
	/*****************************************/
	/* PRECONDITION - PROGRAM HAS A RATE	 */
	/* POSTCONDITION - FUNCTION RETURNS RATE */
	/*****************************************/
	{
		/******************/
		/* RETURN SECTION */
		/******************/
		return rate;		// RETURNS RATE
	}
	
	public double getAddBal ()
	/**************************************************/
	/* PRECONDITION - PROGRAM HAS A BALANCE, DEPOSIT, */
	/* 				  INTEREST, TIME, AND RATE 		  */
	/* POSTCONDITION - FUNCTION RETURNS BALANCE   	  */
	/**************************************************/
	{
		// COMMENT THIS SECTION NEXT
		double power; 
		double value;
		
		balance += deposit;
		
		interest = interest / 100;
		
		power = interest * time;
		
		value = 1 + (interest / rate);
		
		balance = balance * (Math.pow(value, power));
		
		return balance;
	}
}
